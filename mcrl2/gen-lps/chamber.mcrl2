proc Chamber(self:Id, parent:Id) = 
    ss43(self, parent, S_OFF).
    RPC_Chamber_CLASS(self, parent, S_OFF, [], ActionPhase,actArgs([], [], 0, false));

proc RPC_Chamber_CLASS(self: Id, parent: Id, s: State, chs: Children, phase: Phase, aArgs: ActPhaseArgs) =
    (
    % ===========
    % BEGIN STATE

    %% If random state changes are enabled, then we can move to any state
    %% in any move_to referer. Upon receiving an action, move immediately
    %% to the corresponding state if such a state exists; otherwise, ignore
    %% the command.

    %% For example, if we have the following situation:

    %% state: ON
    %% state: OFF
    %%    when ( $ANY$FwCHILDREN in_state WARNING ) move_to ERROR
    %%    when ( $ANY$FwCHILDREN in_state ON ) move_to ON
    %%    action: ON
    %%        do ON $ALL$FwCHILDREN
    %%    action: STANDBY
    %%        do STANDBY $ALL$FwCHILDREN
    %% state: ERROR
    %%    when ( $ANY$FwCHILDREN in_state WARNING ) move_to OFF

    %% Then this is translated (roughly) to:

    %% (state is ON -> delta) +
    %% (state is OFF ->
    %%   (random state changes are enabled -> move_state ERROR) +
    %%   (random state changes are enabled -> move_state ON) +
    %%   (receive command STANDBY . ignore command STANDBY)) +
    %%   (receive command ON . move_state ON)) +
    %% (state is ERROR) ->
    %%   (random state changes are enabled -> move_state OFF))

    % --------------------------
    % BEGIN RANDOM STATE CHANGES

    (isS_OFF(s) ->
        sum s1: State.((rsc(aArgs) && (isS_ERROR(s1) || isS_TRIPPED(s1) || isS_RAMPING(s1) || isS_RAMPING_DOWN(s1) || isS_RAMPING_UP(s1) || isS_STANDBY(s1) || isS_ON(s1) || isS_OK(s1))) ->
            ss43(self, parent, s1).
            move_state4(self, s1).
            RPC_Chamber_CLASS(self, parent, s, chs, WhenPhase,
                      reset(aArgs)))) +

    % END RANDOM STATE CHANGES
    % ------------------------

    % --------------------
    % BEGIN ACTION CLAUSES

    sum c: Command.
    (
    rc34(parent, self, c).
    ((c == C_STANDBY) ->
    ss43(self, parent, S_STANDBY).
    move_state4(self, S_STANDBY).
    RPC_Chamber_CLASS(self, parent, S_STANDBY, chs, WhenPhase, (reset(aArgs)))
    <>
    ((c == C_OFF) ->
    ss43(self, parent, S_OFF).
    move_state4(self, S_OFF).
    RPC_Chamber_CLASS(self, parent, S_OFF, chs, WhenPhase, (reset(aArgs)))
    <>
    ((c == C_ON) ->
    ss43(self, parent, S_ON).
    move_state4(self, S_ON).
    RPC_Chamber_CLASS(self, parent, S_ON, chs, WhenPhase, (reset(aArgs)))
    <>
    ss43(self, parent, s).
    ignored_command(self, c).
    RPC_Chamber_CLASS(self, parent, s, chs, phase, update_pc(aArgs, -1)))))
    )

    % END ACTION CLAUSES
    % ------------------

    % END STATE
    % =========
    ) +
    (
    % ===========
    % BEGIN STATE

    %% If random state changes are enabled, then we can move to any state
    %% in any move_to referer. Upon receiving an action, move immediately
    %% to the corresponding state if such a state exists; otherwise, ignore
    %% the command.

    %% For example, if we have the following situation:

    %% state: ON
    %% state: OFF
    %%    when ( $ANY$FwCHILDREN in_state WARNING ) move_to ERROR
    %%    when ( $ANY$FwCHILDREN in_state ON ) move_to ON
    %%    action: ON
    %%        do ON $ALL$FwCHILDREN
    %%    action: STANDBY
    %%        do STANDBY $ALL$FwCHILDREN
    %% state: ERROR
    %%    when ( $ANY$FwCHILDREN in_state WARNING ) move_to OFF

    %% Then this is translated (roughly) to:

    %% (state is ON -> delta) +
    %% (state is OFF ->
    %%   (random state changes are enabled -> move_state ERROR) +
    %%   (random state changes are enabled -> move_state ON) +
    %%   (receive command STANDBY . ignore command STANDBY)) +
    %%   (receive command ON . move_state ON)) +
    %% (state is ERROR) ->
    %%   (random state changes are enabled -> move_state OFF))

    % --------------------------
    % BEGIN RANDOM STATE CHANGES

    (isS_STANDBY(s) ->
        sum s1: State.((rsc(aArgs) && (isS_ERROR(s1) || isS_TRIPPED(s1) || isS_RAMPING(s1) || isS_RAMPING_UP(s1) || isS_RAMPING_DOWN(s1) || isS_OFF(s1) || isS_ON(s1))) ->
            ss43(self, parent, s1).
            move_state4(self, s1).
            RPC_Chamber_CLASS(self, parent, s, chs, WhenPhase,
                      reset(aArgs)))) +

    % END RANDOM STATE CHANGES
    % ------------------------

    % --------------------
    % BEGIN ACTION CLAUSES

    sum c: Command.
    (
    rc34(parent, self, c).
    ((c == C_ON) ->
    ss43(self, parent, S_ON).
    move_state4(self, S_ON).
    RPC_Chamber_CLASS(self, parent, S_ON, chs, WhenPhase, (reset(aArgs)))
    <>
    ((c == C_OFF) ->
    ss43(self, parent, S_OFF).
    move_state4(self, S_OFF).
    RPC_Chamber_CLASS(self, parent, S_OFF, chs, WhenPhase, (reset(aArgs)))
    <>
    ((c == C_STANDBY) ->
    ss43(self, parent, S_STANDBY).
    move_state4(self, S_STANDBY).
    RPC_Chamber_CLASS(self, parent, S_STANDBY, chs, WhenPhase, (reset(aArgs)))
    <>
    ss43(self, parent, s).
    ignored_command(self, c).
    RPC_Chamber_CLASS(self, parent, s, chs, phase, update_pc(aArgs, -1)))))
    )

    % END ACTION CLAUSES
    % ------------------

    % END STATE
    % =========
    ) +
    (
    % ===========
    % BEGIN STATE

    %% If random state changes are enabled, then we can move to any state
    %% in any move_to referer. Upon receiving an action, move immediately
    %% to the corresponding state if such a state exists; otherwise, ignore
    %% the command.

    %% For example, if we have the following situation:

    %% state: ON
    %% state: OFF
    %%    when ( $ANY$FwCHILDREN in_state WARNING ) move_to ERROR
    %%    when ( $ANY$FwCHILDREN in_state ON ) move_to ON
    %%    action: ON
    %%        do ON $ALL$FwCHILDREN
    %%    action: STANDBY
    %%        do STANDBY $ALL$FwCHILDREN
    %% state: ERROR
    %%    when ( $ANY$FwCHILDREN in_state WARNING ) move_to OFF

    %% Then this is translated (roughly) to:

    %% (state is ON -> delta) +
    %% (state is OFF ->
    %%   (random state changes are enabled -> move_state ERROR) +
    %%   (random state changes are enabled -> move_state ON) +
    %%   (receive command STANDBY . ignore command STANDBY)) +
    %%   (receive command ON . move_state ON)) +
    %% (state is ERROR) ->
    %%   (random state changes are enabled -> move_state OFF))

    % --------------------------
    % BEGIN RANDOM STATE CHANGES

    (isS_ON(s) ->
        sum s1: State.((rsc(aArgs) && (isS_ERROR(s1) || isS_TRIPPED(s1) || isS_RAMPING(s1) || isS_RAMPING_DOWN(s1) || isS_RAMPING_UP(s1) || isS_STANDBY(s1) || isS_ON(s1) || isS_OFF(s1))) ->
            ss43(self, parent, s1).
            move_state4(self, s1).
            RPC_Chamber_CLASS(self, parent, s, chs, WhenPhase,
                      reset(aArgs)))) +

    % END RANDOM STATE CHANGES
    % ------------------------

    % --------------------
    % BEGIN ACTION CLAUSES

    sum c: Command.
    (
    rc34(parent, self, c).
    ((c == C_STANDBY) ->
    ss43(self, parent, S_STANDBY).
    move_state4(self, S_STANDBY).
    RPC_Chamber_CLASS(self, parent, S_STANDBY, chs, WhenPhase, (reset(aArgs)))
    <>
    ((c == C_OFF) ->
    ss43(self, parent, S_OFF).
    move_state4(self, S_OFF).
    RPC_Chamber_CLASS(self, parent, S_OFF, chs, WhenPhase, (reset(aArgs)))
    <>
    ((c == C_ON) ->
    ss43(self, parent, S_ON).
    move_state4(self, S_ON).
    RPC_Chamber_CLASS(self, parent, S_ON, chs, WhenPhase, (reset(aArgs)))
    <>
    ss43(self, parent, s).
    ignored_command(self, c).
    RPC_Chamber_CLASS(self, parent, s, chs, phase, update_pc(aArgs, -1)))))
    )

    % END ACTION CLAUSES
    % ------------------

    % END STATE
    % =========
    ) +
    (
    % ===========
    % BEGIN STATE

    %% If random state changes are enabled, then we can move to any state
    %% in any move_to referer. Upon receiving an action, move immediately
    %% to the corresponding state if such a state exists; otherwise, ignore
    %% the command.

    %% For example, if we have the following situation:

    %% state: ON
    %% state: OFF
    %%    when ( $ANY$FwCHILDREN in_state WARNING ) move_to ERROR
    %%    when ( $ANY$FwCHILDREN in_state ON ) move_to ON
    %%    action: ON
    %%        do ON $ALL$FwCHILDREN
    %%    action: STANDBY
    %%        do STANDBY $ALL$FwCHILDREN
    %% state: ERROR
    %%    when ( $ANY$FwCHILDREN in_state WARNING ) move_to OFF

    %% Then this is translated (roughly) to:

    %% (state is ON -> delta) +
    %% (state is OFF ->
    %%   (random state changes are enabled -> move_state ERROR) +
    %%   (random state changes are enabled -> move_state ON) +
    %%   (receive command STANDBY . ignore command STANDBY)) +
    %%   (receive command ON . move_state ON)) +
    %% (state is ERROR) ->
    %%   (random state changes are enabled -> move_state OFF))

    % --------------------------
    % BEGIN RANDOM STATE CHANGES

    (isS_ERROR(s) ->
        sum s1: State.((rsc(aArgs) && (isS_RAMPING(s1) || isS_ERROR(s1) || isS_TRIPPED(s1) || isS_RAMPING_UP(s1) || isS_RAMPING_DOWN(s1) || isS_ON(s1) || isS_STANDBY(s1) || isS_OFF(s1))) ->
            ss43(self, parent, s1).
            move_state4(self, s1).
            RPC_Chamber_CLASS(self, parent, s, chs, WhenPhase,
                      reset(aArgs)))) +

    % END RANDOM STATE CHANGES
    % ------------------------

    % --------------------
    % BEGIN ACTION CLAUSES

    sum c: Command.
    (
    rc34(parent, self, c).
    ((c == C_ON) ->
    ss43(self, parent, S_ON).
    move_state4(self, S_ON).
    RPC_Chamber_CLASS(self, parent, S_ON, chs, WhenPhase, (reset(aArgs)))
    <>
    ((c == C_STANDBY) ->
    ss43(self, parent, S_STANDBY).
    move_state4(self, S_STANDBY).
    RPC_Chamber_CLASS(self, parent, S_STANDBY, chs, WhenPhase, (reset(aArgs)))
    <>
    ((c == C_OFF) ->
    ss43(self, parent, S_OFF).
    move_state4(self, S_OFF).
    RPC_Chamber_CLASS(self, parent, S_OFF, chs, WhenPhase, (reset(aArgs)))
    <>
    ss43(self, parent, s).
    ignored_command(self, c).
    RPC_Chamber_CLASS(self, parent, s, chs, phase, update_pc(aArgs, -1)))))
    )

    % END ACTION CLAUSES
    % ------------------

    % END STATE
    % =========
    ) +
    (
    % ===========
    % BEGIN STATE

    %% If random state changes are enabled, then we can move to any state
    %% in any move_to referer. Upon receiving an action, move immediately
    %% to the corresponding state if such a state exists; otherwise, ignore
    %% the command.

    %% For example, if we have the following situation:

    %% state: ON
    %% state: OFF
    %%    when ( $ANY$FwCHILDREN in_state WARNING ) move_to ERROR
    %%    when ( $ANY$FwCHILDREN in_state ON ) move_to ON
    %%    action: ON
    %%        do ON $ALL$FwCHILDREN
    %%    action: STANDBY
    %%        do STANDBY $ALL$FwCHILDREN
    %% state: ERROR
    %%    when ( $ANY$FwCHILDREN in_state WARNING ) move_to OFF

    %% Then this is translated (roughly) to:

    %% (state is ON -> delta) +
    %% (state is OFF ->
    %%   (random state changes are enabled -> move_state ERROR) +
    %%   (random state changes are enabled -> move_state ON) +
    %%   (receive command STANDBY . ignore command STANDBY)) +
    %%   (receive command ON . move_state ON)) +
    %% (state is ERROR) ->
    %%   (random state changes are enabled -> move_state OFF))

    % --------------------------
    % BEGIN RANDOM STATE CHANGES

    (isS_RAMPING(s) ->
        sum s1: State.((rsc(aArgs) && (isS_ERROR(s1) || isS_TRIPPED(s1) || isS_STANDBY(s1) || isS_ON(s1) || isS_OFF(s1) || isS_RAMPING_DOWN(s1) || isS_RAMPING_UP(s1))) ->
            ss43(self, parent, s1).
            move_state4(self, s1).
            RPC_Chamber_CLASS(self, parent, s, chs, WhenPhase,
                      reset(aArgs)))) +

    % END RANDOM STATE CHANGES
    % ------------------------

    % --------------------
    % BEGIN ACTION CLAUSES

    sum c: Command.
    (
    rc34(parent, self, c).
    ((c == C_STANDBY) ->
    ss43(self, parent, S_STANDBY).
    move_state4(self, S_STANDBY).
    RPC_Chamber_CLASS(self, parent, S_STANDBY, chs, WhenPhase, (reset(aArgs)))
    <>
    ((c == C_OFF) ->
    ss43(self, parent, S_OFF).
    move_state4(self, S_OFF).
    RPC_Chamber_CLASS(self, parent, S_OFF, chs, WhenPhase, (reset(aArgs)))
    <>
    ((c == C_ON) ->
    ss43(self, parent, S_ON).
    move_state4(self, S_ON).
    RPC_Chamber_CLASS(self, parent, S_ON, chs, WhenPhase, (reset(aArgs)))
    <>
    ss43(self, parent, s).
    ignored_command(self, c).
    RPC_Chamber_CLASS(self, parent, s, chs, phase, update_pc(aArgs, -1)))))
    )

    % END ACTION CLAUSES
    % ------------------

    % END STATE
    % =========
    ) +
    (
    % BEGIN GENERIC CLAUSES (shared by all states)
    % Whenever we are not sending a command to the children, a child may
    % spontaneously change its state due to a hardware event and send its
    % state upward. Such state-change messages are called notifications.

    % Notifications can occur in the following cases:
    %  (1) After initialization, while in the action phase:
    %  (1.a) We have not received a command yet in this action phase.
    %  (1.b) We are executing an action, or we finished executing an action but still have to send
    %        some commands.
    %  (2) During initialization.

    % Note that this implies that we never receive notifications during the execution of the when phase (i) and
    % we never receive notifcations directly after we finish sending the last command after executing an action (ii).
    % The rationale behind this is as follows:
    %  (i)  The execution of the when clauses is a noninteractive process: the system decides what the
    %       new state is, based only on *local* information. Therefore, this process finishes almost instantly.
    %       In the real system, notifications which happen to arrive during the when phase would be queued, but
    %       we don't queue messages in our model. It is unlikely that any important behaviour is missed
    %       due to this design decision.
    %  (ii) After sending the last command, the model can move into the when phase. Moving to a new state
    %       before handling this notification will almost certainly be closer to the real behaviour of the
    %       system. We therefore disallow notifications at this point.

    % (1.a) We have initialized and we have not yet received a command in this action phase.
    % We now accept notifications.
    sum id:Id.(sum s1:State.(((isActPhase(phase)) && (is_child(id, chs)) &&
                             (pc(aArgs) == 0) && (initialized(chs))) ->
       rs54(id, self, s1).
       move_phase4(self, WhenPhase).
       RPC_Chamber_CLASS(self, parent, s, update_busy(id, false, update_state(id, s1, chs)), WhenPhase, reset(aArgs))))
    +

    % (1.b) We are in the middle of executing an action, or we finished executing and still have to send some
    % commands. We accept notifications, but we don't move to
    % the when phase, since we still must execute one or more statements. These semantics are valid
    % assuming a child does not send more than one notifications during the execution of the same
    % actions.
    sum id:Id.(sum s1:State.(((isActPhase(phase)) && (is_child(id, chs)) &&
           ((pc(aArgs) > 0) ||
            ((pc(aArgs) == -1) && (cq(aArgs) != [])))) ->
       rs54(id, self, s1).
       RPC_Chamber_CLASS(self, parent, s,
                     update_busy(id,
                                 false,
                                 update_state(id, s1, chs)),
                     phase, aArgs))) +


    % Clause to send commands added by actions in the initialization phase. Note that
    % we keep track of the children which have not yet responded in the nrf list.
    ((isActPhase(phase)) && (cq(aArgs) != []) && (!(initialized(chs)))) ->
        sc45(self, id(head(cq(aArgs))), command(head(cq(aArgs)))).
            RPC_Chamber_CLASS(self, parent, s,
                          update_busy(id(head(cq(aArgs))), true, chs),
                          phase,
                          actArgs(tail(cq(aArgs)),
                                  (id(head(cq(aArgs))))|>(nrf(aArgs)), pc(aArgs), rsc(aArgs))) +


    % Clause to send commands added by actions after the initialization phase. Note that
    % we don't keep track of the children which have not yet responded. Recepients are only
    % marked busy and not added to the nrf list.
    ((isActPhase(phase)) && (cq(aArgs) != []) && initialized(chs)) ->
        sc45(self, id(head(cq(aArgs))), command(head(cq(aArgs)))).
            RPC_Chamber_CLASS(self, parent, s,
                          update_busy(id(head(cq(aArgs))), true, chs),
                          phase,
                          actArgs(tail(cq(aArgs)), [], pc(aArgs), rsc(aArgs))) +


    % (2) Clause to receive the new states from the children during initialization.
    % Note that some
    % children may spontaneously change state and send a notification. This
    % may cause us to receive more than one message from a child while we
    % wait for all children to respond.
    % If a child sends two state messages, we will only consider the last
    % state when we process the when clauses.
    sum id:Id.(sum s1:State.(
            ((isActPhase(phase)) && (cq(aArgs) == []) && (nrf(aArgs) != []) && (is_child(id, chs)) &&
             (!(initialized(chs)))) ->
                    rs54(id, self, s1).
                    ((initialized(update_state(id,s1,chs))) ->
                         end_initialization(self).
                         RPC_Chamber_CLASS(self, parent, s, update_state(id,s1,chs), phase,
                                       actArgs(cq(aArgs), remove(id, nrf(aArgs)), -1, rsc(aArgs)
                                       )) <>
                         RPC_Chamber_CLASS(self, parent, s, update_state(id,s1,chs), phase,
                                       actArgs(cq(aArgs), remove(id, nrf(aArgs)), -1, rsc(aArgs)
                                       ))))) +

    % Go to the when phase whenever all children are initialized, we executed an action
    % and there are no pending messages.
    ((isActPhase(phase)) && (cq(aArgs) == []) && (initialized(chs)) && (pc(aArgs) == -1)) ->
        move_phase4(self, WhenPhase).
        RPC_Chamber_CLASS(self, parent, s, chs, WhenPhase, reset(aArgs))

    % END GENERIC CLAUSES
    );
